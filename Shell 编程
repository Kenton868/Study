所有文件以.sh结尾的为shell 文件；
利用vi;
执行： zsh或者bash 文件名【参数】
执行前记得加可执行权限 x；
histo 命令；来保存历史命令；
重新设定能够保留的命令数量：
HISTORYSIZE=数量；
history + 数字，显示最近使用的多少个命令
!! 执行上一个命令，
！-n 执行倒数第n个命令；
！string，执行最近的以string开头的命令；
命令的前几个字母+tab 后显示以 该几个字母开头的命令列出来，可补全该命令
alias ：创建别名
 alias + 别名 = '源命令'
 
 查看所有的别名： alias
 
 删除别名： unalias + 别名；
 
 优先级：
 第一顺位执行用绝对路径或相对路径执行的命令
 第二顺位执行别名；
 第三顺位执行bash 的命令；
 第四顺位：执行#path 环境变量里的命令；
 
 
 
 shell 特殊字符
 
 ？  匹配任意应该字符；
 
 对变量赋值： 如： dd=name;
 执行dd时需要加上$dd;
 如变量后接命令则格式为： dd =$(命令)；
 执行时： $dd；
 
 
 ''单引号中 所有的特殊符号都无特殊含义，只作为符号。
 
 ”“双引号除\ $和空格符号除外的其他的特殊符号都没有意义，只作为符号。
 注：双引号内的 \  会将\后面挨着的特殊字符去掉;
 
 
 反引号 与$(命令)  作用相同；`命令`=$(命令);
 
 
 成组命令 ${命令；命令；命令；}
 
 
 
 shell 变量默认位字符串 ，如需进行计算，必须定于变量类型，浮点或整型；
 
 定义变量赋值一般形式：变量名=字符串；注意：=两边无空格！！
 
 
 
 declare [-i（整形）][+/-][变量]；
 修改变量的类型；
 
 Linux 只存在一维数组；
 
 
 
 
 数组定义：${数组名[下标]}；
 数组名={值，值，值....}；
 
 
 
 
 
 
 
 
 read 命令接受键盘输入
 -s 输入的字符为机密；
 -t 加秒数，显示输入的时间；
 -p "内接注释"（类似于printf）；
 -n 后接数字，只让输入该数字个字符；
